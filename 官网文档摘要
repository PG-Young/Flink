1、事件驱动的应用程序是一个有状态的应用程序，它从一个或多个事件流中提取事件，并通过触发计算，状态更新或外部操作对传入事件做出反应。
2、事件驱动的应用程序基于有状态流处理应用程序。在这种设计中，数据和计算是共同定位的，这产生了本地（内存或磁盘）数据访问。
      通过定期将检查点写入远程持久存储来实现容错
3、事件驱动的应用程序不是查询远程数据库，而是在本地访问其数据，从而在吞吐量和延迟方面产生更好的性能。
      远程持久存储的定期检查点可以异步和递增完成。因此，检查点对常规事件处理的影响非常小。
      但是，事件驱动的应用程序设计提供的不仅仅是本地数据访问。在分层体系结构中，多个应用程序共享同一数据库是很常见的。
      因此，需要协调数据库的任何更改，例如由于应用程序更新或扩展服务而更改数据布局。
      由于每个事件驱动的应用程序都负责自己的数据，因此更改数据表示或扩展应用程序需要较少的协调。
      
4、Flink提供了一组丰富的状态原语，可以管理非常大的数据量（最多几TB），并且具有一次性的一致性保证。
      此外，Flink支持事件时间，高度可定制的窗口逻辑，以及通过ProcessFunction实现高级业务逻辑提供的细粒度时间控制。
      此外，Flink还提供了一个用于复杂事件处理（CEP）的库，用于检测数据流中的模式。
      然而，Flink在事件驱动应用程序方面的出色功能是savepoint。保存点是一致的状态图像，可用作兼容应用程序的起点。
      给定保存点，可以更新应用程序或调整其规模，或者可以启动应用程序的多个版本以进行A / B测试
      
5、借助先进的流处理引擎，还可以实时地执行分析。流式查询或应用程序不是读取有限数据集，而是摄取实时事件流，并在消耗事件时不断生成和更新结果。
     结果要么写入外部数据库，要么保持为内部状态。仪表板应用程序可以从外部数据库读取最新结果或直接查询应用程序的内部状态。
6、与批量查询相比，流式查询不必处理输入数据中的人为边界，这些边界是由定期导入和输入的有界性质引起的。
